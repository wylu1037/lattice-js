import { Address } from "@/common/types/address";
import { TraceabilityContract } from "@/lattice/builtin/index";
import {
  encodeBytes32Array,
  hexStringsToBufferWithTrimmedZeros
} from "@/utils/bytes32";
import { Result } from "@ethersproject/abi";

describe("Traceability", () => {
  const traceability = new TraceabilityContract();

  it("should create a business", async () => {
    const business = traceability.createBusiness();
    expect(business).toBe("0x31");
  });

  it("should add a protocol", async () => {
    const actual = await traceability.createProtocol(
      1,
      Buffer.from(
        'syntax = "proto3";\n\nmessage Student {\n\tstring id = 1;\n\tstring name = 2;\n}'
      )
    );
    const expected =
      "0xef7e985800000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000373796e746178203d202270726f746f33223b0a0a6d6573736167652053747564656e74207b0a09737472696e67206964203d20313b0a09737472696e67206e616d65203d20323b0a7d0000000000000000000000000000000000000000000000";
    expect(actual).toBe(expected);
  });

  it("should be able decode read protocol result", async () => {
    const callResult =
      "0x0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000007ac60a4f2b3722efa57625fe3c2f863def2159370000000000000000000000000000000000000000000000000000000000000040000000000000000000000000000000000000000000000000000000000000000773796e746178203d202270726f746f33223b0a0a6d65737361676520536e65616b6572207b0a2020737472696e67206964203d20313b0a2020737472696e67206e616d65203d20323b0a2020737472696e67206272616e64203d20333b0a2020666c6f6174207072696365203d20343b0a2020726570656174656420737472696e672073697a6573203d20353b0a2020726570656174656420737472696e6720636f6c6f7273203d20363b0a2020737472696e67206465736372697074696f6e203d20373b0a2020626f6f6c20696e5f73746f636b203d20383b0a7d00000000";
    const array = await traceability
      .getIface()
      .getInterface()
      .decodeFunctionResult("getAddress", callResult);

    const result = (array.at(0) as Array<object>).at(0) as Result;
    const updater = result.updater as string;
    const data = result.data as Array<string>;
    const decoded = hexStringsToBufferWithTrimmedZeros(data);
    const owner = new Address(updater).toZLTC();
    console.log(Buffer.from(decoded).toString("hex"));
    expect(owner).toBe("zltc_bXmfbHYXx5e2ri9nSrDcjGLzZ4A3EmbXK");
  });

  it("should write a traceability", async () => {
    const actual = await traceability.writeTraceability({
      protocolUri: 8589934595,
      dataId: "1",
      data: encodeBytes32Array(Buffer.from([1, 2, 3, 4, 5, 6, 7, 8])),
      businessContractAddress: "zltc_YBomBNykwMqxm719giBL3VtYV4ABT9a8D"
    });
    const expected =
      "0x4131ff530000000000000000000000000000000000000000000000000000000200000003000000000000000000000000000000000000000000000000000000000000008000000000000000000000000000000000000000000000000000000000000000c0000000000000000000000000561717f7922a233720ae38acaa4174cda0bf17660000000000000000000000000000000000000000000000000000000000000001310000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000010102030405060708000000000000000000000000000000000000000000000000";
    expect(actual).toBe(expected);
  });

  it("should read a traceability", async () => {
    const actual = await traceability.readTraceability(
      "1",
      "zltc_YBomBNykwMqxm719giBL3VtYV4ABT9a8D"
    );
    const expected =
      "0x295adafb0000000000000000000000000000000000000000000000000000000000000040000000000000000000000000561717f7922a233720ae38acaa4174cda0bf176600000000000000000000000000000000000000000000000000000000000000013100000000000000000000000000000000000000000000000000000000000000";
    expect(actual).toBe(expected);
  });
});
