import { ProposalContract } from "@/lattice/builtin/index";

describe("Proposal", () => {
  it("should be able to approve a proposal", async () => {
    const proposal = new ProposalContract();
    const approve = await proposal.approve(
      "0x10000000000000000000000000000000000000000000000000000000000000000"
    );
    expect(approve).toBe(
      "0x90ca27f3000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000010000000000000000000000000000000000000000000000000000000000000043307831303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030300000000000000000000000000000000000000000000000000000000000"
    );
  });

  it("should be able to reject a proposal", async () => {
    const proposal = new ProposalContract();
    const reject = await proposal.reject(
      "0x10000000000000000000000000000000000000000000000000000000000000000"
    );
    expect(reject).toBe(
      "0x90ca27f3000000000000000000000000000000000000000000000000000000000000004000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000000043307831303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030300000000000000000000000000000000000000000000000000000000000"
    );
  });

  it("should be able to refresh a proposal", async () => {
    const proposal = new ProposalContract();
    const refresh = await proposal.refresh(
      "0x10000000000000000000000000000000000000000000000000000000000000000"
    );
    expect(refresh).toBe(
      "0x6de8a60900000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000043307831303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030300000000000000000000000000000000000000000000000000000000000"
    );
  });

  it("should be able to refresh a batch of proposals", async () => {
    const proposal = new ProposalContract();
    const refresh = await proposal.refreshBatch([
      "0x10000000000000000000000000000000000000000000000000000000000000000"
    ]);
    expect(refresh).toBe(
      "0x36bd85bd0000000000000000000000000000000000000000000000000000000000000020000000000000000000000000000000000000000000000000000000000000000100000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000043307831303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030300000000000000000000000000000000000000000000000000000000000"
    );
  });

  it("should be able to cancel a proposal", async () => {
    const proposal = new ProposalContract();
    const cancel = await proposal.cancel(
      "0x10000000000000000000000000000000000000000000000000000000000000000"
    );
    expect(cancel).toBe(
      "0x0b4f3f3d00000000000000000000000000000000000000000000000000000000000000200000000000000000000000000000000000000000000000000000000000000043307831303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030303030300000000000000000000000000000000000000000000000000000000000"
    );
  });
});